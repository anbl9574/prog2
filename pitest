import random
import math
import matplotlib.pyplot as plt
import numpy as np
import concurrent.futures as future
import time



def estimate_pi(n):
    nc = 0  
    inside_x = []
    inside_y = []
    outside_x = []
    outside_y = []

    for _ in range(n):
        x = random.uniform(-1, 1)
        y = random.uniform(-1, 1)

        if x**2 + y**2 <= 1:  
            nc += 1
            inside_x.append(x)
            inside_y.append(y)
        else:
            outside_x.append(x)
            outside_y.append(y)

    estimated_pi = 4 * nc / n

    return nc, estimated_pi, inside_x, inside_y, outside_x, outside_y

def greaterThanTwo(num):
    if(num <= 1):
        return True
    else:
        return False

def hypersphere(n,d):
    
    random_values=[np.random.uniform(-1, 1, d) for i in range(n)]
    f=lambda x: x**2
    values=map(f,random_values)
    filterd=list(filter(greaterThanTwo, map(np.sum, values)))


    n_c = np.array(filterd).size
    estVol = 2**d*len(filterd)/n
    realVol = (math.pi**(d/2)/(math.gamma(d/2+1)))

    return estVol, realVol


def multi_hypersphere(n,d):
    nList = [int(n/10)]*10
    dList = [d]*10
    with future.ProcessPoolExecutor() as ex:

        result = ex.map(_multi_hypersphere, nList, dList)
    return np.sum(result)/n

def _multi_hypersphere(n,d):
    
    random_values=[np.random.uniform(-1, 1, d) for i in range(n)]
    f=lambda x: x**2
    values=map(f,random_values)
    filterd=list(filter(greaterThanTwo, map(np.sum, values)))


    n_c = np.array(filterd).size
    estVol = 2**d*len(filterd)/n
    realVol = (math.pi**(d/2)/(math.gamma(d/2+1)))

    return estVol




if __name__ == "__main__":
    n = int(input("Enter the number of random points (n): "))
    nc, estimated_pi, inside_x, inside_y, outside_x, outside_y = estimate_pi(n)

    print("Number of points inside the circle (nc):", nc)
    print("Approximation of π (π ≈ 4nc/n):", estimated_pi)
    print("Value of pi:",math.pi)
    plt.figure(figsize=(6, 6))
    plt.scatter(inside_x, inside_y, color='red', marker='.', label='Inside Circl')
    plt.scatter(outside_x, outside_y, color='blue', marker='.', label='Outside Circl')

    plt.xlim(-1, 1)
    plt.ylim(-1, 1)

    plt.legend()

    plt.savefig('pi_approximation.png')

    plt.show()


    n = int(input("Enter the number of random points for hypessphere (n): "))
    d= int(input("Enter the number of dimensions (d): "))

    estVol, realVol=hypersphere(n,d)

    print("Estimated value of the sphere:",estVol)
    print("Real value of the sphere:",realVol)



    tstart1 = time.perf_counter ()
    calculatedVolume = hypersphere(10000000,11)
    tstop1 = time.perf_counter ()
    print ( f" Measured time for code from 1.2 with (n,d) = (10000000,11) is : {tstop1 - tstart1} seconds ")
	#Takes  65 seconds

    tstart2 = time . perf_counter ()
    multiCalculatedVolume = multi_hypersphere(10000000,11)
    tstop2 = time . perf_counter ()
    print ( f" Measured time for code from 1.2 with (n,d) = (10000000,11) is : {tstop2 - tstart2} seconds ")
    #Around 20 seconds